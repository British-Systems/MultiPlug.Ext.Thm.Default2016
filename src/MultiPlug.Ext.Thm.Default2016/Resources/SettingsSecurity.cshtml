@model MultiPlug.Base.Http.EdgeApp
@{
    Layout = "MultiPlug.Ext.Thm.Default2016.Layout";
}

<style>
    .setting-heading h2 {
        margin-left: 0.1em;
        margin-top: 0px;
        margin-bottom: 20px;
    }
</style>

<div class="setting-heading">
    <h2><i class="icon-lock"></i>&nbsp;Security</h2>
</div>

<div class="box">
    <ul class="nav nav-tabs" id="myTopTab">
        <li class="active"><a href="#UsersEdit">Users</a></li>
        <li><a href="#ProvidersEdit">Providers</a></li>
    </ul>
    <div id="myTopTabContent" class="tab-content" style="margin-bottom: 10px">
        <div class="tab-pane fade in active" id="UsersEdit">
            <div class="row-fluid">
                <div class="well">
                    <ul class="nav nav-tabs" id="myTab">
                        <li class="active"><a href="#UserEdit">Edit</a></li>
                        <li><a href="#UserList">List</a></li>
                        <li><a href="#UserAdd">Add</a></li>
                        <li><a href="#UserTokens">Bearer Tokens</a></li>
                    </ul>
                    <div id="myTabContent" class="tab-content" style="margin-bottom: 10px">
                        <div class="tab-pane fade in active" id="UserEdit">
                            <form id="form-edituser" >
                                <div class="row-fluid">
                                    <div class="well form-horizontal">
                                        <div class="control-group">
                                            <label class="control-label" for="txt-edituser">User</label>
                                            <div class="controls">
                                                <div class="input-append">
                                                    <input name="username" id="txt-edituser" type="text" class="input-block-level" autocomplete="off" value="@Raw(Model.Context.User.Identity.Name)" />
                                                    <div class="btn-group">
                                                        <button class="btn dropdown-toggle" data-toggle="dropdown">
                                                            <span class="caret">
                                                            </span>
                                                        </button>
                                                        <ul class="dropdown-menu userlist"></ul>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="control-group">
                                            <label class="control-label" for="txt-editusercurrentpassword">Current Password</label>
                                            <div class="controls">
                                                <input name="password" type="password" id="txt-editusercurrentpassword" placeholder="Current Password">
                                            </div>
                                        </div>

                                        <div class="control-group">
                                            <label class="control-label" for="txt-editusernewpassword">New Password</label>
                                            <div class="controls">
                                                <input name="passwordnew" type="password" id="txt-editusernewpassword" placeholder="New Password">
                                            </div>
                                        </div>

                                        <div class="control-group">
                                            <label class="control-label" for="txt-editusernewpasswordconfirm">Confirm New Password</label>
                                            <div class="controls">
                                                <input type="password" id="txt-editusernewpasswordconfirm" placeholder="Confirm New Password">
                                            </div>
                                        </div>

                                        <div class="control-group">
                                            <div class="controls">
                                                <a class="btn btn-blue" id="btn-edituser" ><i class="icon-save"></i> Update</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>

                        <div class="tab-pane fade" id="UserList">
                            <div class="row-fluid">
                                <div id="usertablecontainer" class="well form-horizontal">

                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>User</th>
                                                <th>Enabled</th>
                                                <th>Delete</th>
                                            </tr>
                                        </thead>
                                        <tbody id="usertable"></tbody>
                                    </table>

                                </div>
                            </div>
                        </div>

                        <div class="tab-pane fade" id="UserAdd">
                            <div class="row-fluid">
                                <div class="well form-horizontal">
                                    <div class="control-group">
                                        <label class="control-label" for="txt-adduserdomain">Domain</label>
                                        <div class="controls">
                                            <div class="input-append">
                                                <input id="txt-adduserdomain" type="text" class="input-block-level" autocomplete="off" value="" />
                                                <div class="btn-group">
                                                    <button class="btn dropdown-toggle" data-toggle="dropdown">
                                                        <span class="caret">
                                                        </span>
                                                    </button>
                                                    <ul class="dropdown-menu domainlist"></ul>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="control-group">
                                        <label class="control-label" for="txt-addusername">Username</label>
                                        <div class="controls">
                                            <input type="text" id="txt-addusername" placeholder="Username" autocomplete="off">
                                        </div>
                                    </div>

                                    <div class="control-group">
                                        <label class="control-label" for="txt-adduserpassword">Password</label>
                                        <div class="controls">
                                            <input type="password" id="txt-adduserpassword" placeholder="Password">
                                        </div>
                                    </div>

                                    <div class="control-group">
                                        <label class="control-label" for="txt-adduserpasswordconfirm">Confirm Password</label>
                                        <div class="controls">
                                            <input type="password" id="txt-adduserpasswordconfirm" placeholder="Confirm Password">
                                        </div>
                                    </div>

                                    <div class="control-group">
                                        <div class="controls">
                                            <a class="btn btn-blue" id="btn-adduser"><i class="icon-plus"></i> Add User</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="tab-pane fade" id="UserTokens">
                            <div class="row-fluid">
                                <form id="form-edittokens">
                                    <div class="well form-horizontal">
                                        <div class="control-group">
                                            <label class="control-label" for="txt-editusertokens">User</label>
                                            <div class="controls">
                                                <div class="input-append">
                                                    <input name="username" id="txt-editusertokens" type="text" class="input-block-level" autocomplete="off" value="@Raw(Model.Context.User.Identity.Name)" />
                                                    <div class="btn-group">
                                                        <button class="btn dropdown-toggle" data-toggle="dropdown">
                                                            <span class="caret">
                                                            </span>
                                                        </button>
                                                        <ul class="dropdown-menu userlist"></ul>
                                                    </div>
                                                </div>
                                                <a class="btn btn-blue" style="margin-left: 34px;" id="btn-refreshtoken"><i class="icon-refresh"></i> Refresh</a>
                                            </div>
                                        </div>

                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th class="span5">Token</th>
                                                    <th class="span5">Friendly Name</th>
                                                    <th class="span2"></th>
                                                </tr>
                                            </thead>
                                            <tbody id="tokentable">
                                                <tr>
                                                    <td class="span5"></td>
                                                    <td class="span5"></td>
                                                    <td class="span2"><button type="button" class="btn btn-green" id="btn-newtoken"><i class="icon-plus"></i></button></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="ProvidersEdit">
            <div class="well">
                <div class="row-fluid">
                    <div class="span4">
                        <div class="input-append">
                            <input type="text" id="txt-newprovider" class="input-block-level" autocomplete="off" />
                            <div class="btn-group">
                                <button class="btn dropdown-toggle" data-toggle="dropdown">
                                    <span class="caret">
                                    </span>
                                </button>
                                <ul class="dropdown-menu providerlist">
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="span2">
                        <a class="btn btn-block btn-green" id="btn-newprovider"><i class="icon-plus"></i> Assembly</a>
                    </div>
                </div>

                <div class="row-fluid">
                    <div class="span4">
                    </div>
                    <div class="span2">
                        <a class="btn btn-block btn-red" id="btn-deleteprovider"><i class="icon-trash"></i> Delete</a>
                    </div>
                </div>
                <div class="row-fluid mt-2">
                    <div id="jstreeProviders">
                        <ul id="providers"></ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" href="@Raw(Model.Context.Paths.Roots.Assets)multiplug.ext.mplib/styles/jstree.style.min.css" />
<script src="@Raw(Model.Context.Paths.Roots.Assets)multiplug.ext.mplib/scripts/jstree.min.js"></script>

<script>
    const genRanHex = size =>[...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');

    function updateUserSelectionList(data) {
        if (data != null) {
            $(".userlist").empty();
            for (let i in data) {
                $(".userlist").append('<li><a class="UserSuggestion" data-suggestion="' + data[i].user + '" href="#">' + data[i].user + '</a></li>');
            }
        }
        else {
            $(".userlist").empty();
            $(".userlist").append('<li><a class="UserSuggestion" data-suggestion="" href="#">Insufficient user rights to populate the user list</a></li>');
        }

        if (data != null) {
            $("#usertable").empty();
            for (let i in data) {
                var Enabled = "";
                if (data[i].enabled)
                {
                    Enabled = "checked";
                }

                if (data[i].user === '@Raw(Model.Context.User.Identity.Name.Replace("\\", "\\\\"))')
                {
                    $("#usertable").append('<tr><td>' + data[i].user + '</td><td><i class="icon-ok"></td></i><td></td></tr>');
                }
                else
                {
                    $("#usertable").append('<tr><td>' + data[i].user + '</td><td><input class="check-enableuser" type="checkbox" value="' + data[i].user + '" ' + Enabled + '/></td><td><a class="btn btn-red btn-deleteuser" data-username="' + data[i].user + '"><i class="icon-trash"></i></a></td></tr>');
                }
            }
        }
        else {
            $("#usertablecontainer").empty();
            $("#usertablecontainer").append('<span class="label label-red">INSUFFICIENT USER RIGHTS</span>');
        }

        $('.UserSuggestion').click(function (event) {
            event.preventDefault();

            var Suggestion = $(this).attr("data-suggestion");

            if (Suggestion != '') {
                var x = $(this).closest(".input-append").find("input");
                $(x).val(Suggestion);
                $(x).trigger("change");
            }
        });

        $(".btn-deleteuser").click(function (event) {
            event.preventDefault();

            if (confirm("Are you sure you want to delete " + $(this).attr('data-username') + " ?")) {
                $.post("@Raw(Model.Context.Paths.Roots.MultiPlug)users/delete/?username=" + $(this).attr('data-username'), function (data) {
                })
                .done(function (data) {
                    updateUserSelectionList(data);
                    populateTokenTable(null, null);
                    alert("User deleted");
                })
                .fail(function (xhr, status, error) {
                    alert(xhr.responseJSON.message);
                });
            };
        });

        $('.check-enableuser').change(function () {
            if (this.checked) {
                $.post('@Raw(Model.Context.Paths.Roots.MultiPlug)users/enable/?username=' + this.value, function (data) {
                })
                .done(function (data) {
                });
            }
            else {
                $.post('@Raw(Model.Context.Paths.Roots.MultiPlug)users/disable/?username=' + this.value, function (data) {
                })
                .done(function (data) {
                });
            }
        });
    }

    function updateDomainSelectionList(data) {
        if (data != null) {
            $(".domainlist").empty();
            for (let i in data) {
                $(".domainlist").append('<li><a class="DomainSuggestion" data-suggestion="' + data[i] + '" href="#">' + data[i] + '</a></li>');
            }
        }
        else {
            $(".domainlist").empty();
            $(".domainlist").append('<li><a class="DomainSuggestion" data-suggestion="" href="#">Insufficient user rights to populate the domain list</a></li>');
        }

        $('.DomainSuggestion').click(function (event) {
            event.preventDefault();

            var Suggestion = $(this).attr("data-suggestion");

            if (Suggestion != '') {
                $(this).closest(".input-append").find("input").val(Suggestion);
            }
        });
    }

    function updateProviders(data) {
        $('#jstreeProviders').jstree('destroy');
        $("#jstreeProviders").empty();
        $("#jstreeProviders").append('<ul id="providers"></ul>')
        for (let i in data) {
            $("#providers").append('<li data-assembly="' + data[i].assembly + '">' + data[i].assembly + '</li>');
        }
        $("#jstreeProviders").bind("loaded.jstree", function (event, data) {
            data.instance.open_all();
        });
        $('#jstreeProviders').jstree({
            "core": {
            "multiple": false,
            "animation": 0,
            "check_callback": true,
        }
        });
    }

    function updateProviderSelectionList(data) {
        if (data != null) {
            $(".providerlist").empty();
            for (let i in data) {
                $(".providerlist").append('<li><a class="ProviderSuggestion" data-suggestion="' + data[i] + '" href="#">' + data[i] + '</a></li>');
            }
        }
        else {
            $(".providerlist").empty();
            $(".providerlist").append('<li><a class="ProviderSuggestion" data-suggestion="" href="#">Insufficient user rights to populate the provider list</a></li>');
        }

        $('.ProviderSuggestion').click(function (event) {
            event.preventDefault();

            var Suggestion = $(this).attr("data-suggestion");

            if (Suggestion != '') {
                $(this).closest(".input-append").find("input").val(Suggestion);
            }
        });
    }

    function newToken() {
        var token = genRanHex(16);

        return '<tr>\
                <td class="span5"><input class="input-block-level" type="text" name="token" value="' + token.toUpperCase() + '" autocomplete="off"></td>\
                <td class="span5"><input class="input-block-level" type="text" name="tokenname" value="" placeholder="What is it used for?" autocomplete="off"></td>\
                <td class="span2"><a class="btn btn-green btn-savetoken"><i class="icon-save"></i> Save</a></i></a></td>\
            </tr>'
    }

    function existingToken(theFriendlyName, theUsername ) {
        return '<tr>\
                <td class="span5">Hidden</td>\
                <td class="span5">' + theFriendlyName + '</td>\
                <td class="span2"><a class="btn btn-red btn-deletetoken" data-username="' + theUsername + '" data-tokenfriendlyname="' + theFriendlyName + '" ><i class="icon-trash"></i> Delete</a></i></a></td>\
            </tr>'
    }

    function populateTokenTable(tokenFriendlyName, theUsername) {
        $('#tokentable tr:not(:last)').remove();

        if (tokenFriendlyName == null)
        { return;}

        for (let i = 0; i < tokenFriendlyName.length; i++) {
            $('#tokentable tr:last').before(existingToken(tokenFriendlyName[i], theUsername));
        }

        $(".btn-deletetoken").click(function (event) {
            event.preventDefault();

            var t = $(this);

            $.post("@Raw(Model.Context.Paths.Roots.MultiPlug)users/tokens/delete/?username=" + $(this).attr("data-username") + "&tokenname=" + $(this).attr("data-tokenfriendlyname"), function (data) {
            })
            .done(function (data) {
                $(t).closest("tr").remove();
            })
            .fail(function (xhr, status, error) {
                alert(xhr.responseJSON.message);
            });
        });
    }

    function refreshTokensList()
    {
        $.ajax({
            url: "@Raw(Model.Context.Paths.Roots.MultiPlug)users/list",
            type: "get",
            async: false,
            success: function (data) {

                var username = $("#txt-editusertokens").val();
                for (let i = 0; i < data.length; i++) {
                    if (data[i].user == username) {
                        populateTokenTable(data[i].tokenName, username);
                        break;
                    }

                    populateTokenTable(null, username);
                }
            },
            error: function (xhr, textStatus, error) {
                populateTokenTable(null, null);
            }
        });
    }

    $(document).ready(function () {
        $('#myTab a').click(function (e) {
            e.preventDefault();
            $(this).tab('show');
        });
        $('#myTopTab a').click(function (e) {
            e.preventDefault();
            $(this).tab('show');
        });
        $('.ProviderSuggestion').click(function (event) {
            event.preventDefault();
            $("#txt-newprovider").val($(this).attr("data-suggestion"));
        });

        $("#btn-edituser").click(function (event) {
            event.preventDefault();
            if ($('#txt-editusernewpassword').val() == $('#txt-editusernewpasswordconfirm').val())
            {
                $.post("@Raw(Model.Context.Paths.Roots.MultiPlug)users/edit/?" + $("#form-edituser").serialize(), function (data) {
                })
                .done(function (data) {
                    $('#txt-editusercurrentpassword').val('');
                    $('#txt-editusernewpassword').val('');
                    $('#txt-editusernewpasswordconfirm').val('');
                    alert("User updated");
                })
                .fail(function(xhr, status, error) {
                    alert(xhr.responseJSON.message);
                });
            }
            else
            {
                $('#txt-editusernewpassword').val('');
                $('#txt-editusernewpasswordconfirm').val('');
                alert('New Passwords do not match');
            }
        });

        $("#btn-adduser").click(function (event) {
            event.preventDefault();
            if ($('#txt-adduserpassword').val() == $('#txt-adduserpasswordconfirm').val())
            {
                $.post("@Raw(Model.Context.Paths.Roots.MultiPlug)users/add/?username=" + $('#txt-addusername').val() + "&domain=" + $('#txt-adduserdomain').val() + "&password=" + $('#txt-adduserpassword').val(), function (data) {

                })
                .done(function (data) {
                    $('#txt-addusername').val('');
                    $('#txt-adduserpassword').val('');
                    $('#txt-adduserpasswordconfirm').val('');
                    updateUserSelectionList(data);
                    alert("User created");
                })
                .fail(function(xhr, status, error) {
                    alert(xhr.responseJSON.message);
                });
            }
            else
            {
                $('#txt-adduserpassword').val('');
                $('#txt-adduserpasswordconfirm').val('');
                alert('Passwords do not match');
            }
        });

        $("#btn-newprovider").click(function (event) {
            event.preventDefault();

            var jsTreeRef = $('#jstreeProviders').jstree(true);

            $.post("@Raw(Model.Context.Paths.Roots.MultiPlug)authentication/providers/add/?assembly=" + $('#txt-newprovider').val(), function (data) {
            })
            .done(function (data) {
                $('#txt-newprovider').val('');
                updateProviders(data);
            })
            .fail(function (xhr, status, error) {
                alert(xhr.responseJSON.message);
            });
        });

        $("#btn-deleteprovider").click(function (event) {
            event.preventDefault();

            var jsTreeRef = $('#jstreeProviders').jstree(true);
            var selected = jsTreeRef.get_selected(true);

            if (selected.length == 1) {
                var assemblyId = $("#" + selected[0].id).attr('data-assembly');
                $.post("@Raw(Model.Context.Paths.Roots.MultiPlug)authentication/providers/delete/?assembly=" + assemblyId, function (data) {
                })
                .done(function (data) {
                    updateProviders(data);
                })
                .fail(function (xhr, status, error) {
                    alert(xhr.responseJSON.message);
                });
            }
        });

        $("#btn-newtoken").click(function () {
            $('#tokentable tr:last').before(newToken());

            $(".btn-savetoken").click(function (event) {
                event.preventDefault();

                var username = $("#txt-editusertokens").val();

                $.post("@Raw(Model.Context.Paths.Roots.MultiPlug)users/tokens/add/?" + $("#form-edittokens").serialize(), function (data) {
                })
                .done(function (data) {
                    populateTokenTable(data.tokenName, username);
                })
                .fail(function (xhr, status, error) {
                    alert(xhr.responseJSON.message);
                });
            });

        });

        $("#btn-refreshtoken").click(function (event) {
            event.preventDefault();
            refreshTokensList();
        });

        $("#txt-editusertokens").change(function (event) {
            event.preventDefault();
            refreshTokensList();
        });

        $.ajax({
            url: "@Raw(Model.Context.Paths.Roots.MultiPlug)users/list",
            type: "get",
            async: false,
            success: function (data) {
                updateUserSelectionList(data);

                var username = $("#txt-editusertokens").val();
                for (let i = 0; i < data.length; i++) {
                    if (data[i].user == username) {
                        populateTokenTable(data[i].tokenFriendlyName, username);
                        break;
                    }

                    populateTokenTable(null, username);
                }
            },
            error: function (xhr, textStatus, error) {
                updateUserSelectionList(null);
            }
        });

        $.ajax({
            url: "@Raw(Model.Context.Paths.Roots.MultiPlug)users/domains",
            type: "get",
            async: false,
            success: function (data) {
                updateDomainSelectionList(data);
            },
            error: function (xhr, textStatus, error) {
                updateDomainSelectionList(null);
            }
        });

        $.ajax({
            url: "@Raw(Model.Context.Paths.Roots.MultiPlug)authentication/providers",
            type: "get",
            async: false,
            success: function (data) {
                updateProviders(data);
            },
            error: function (xhr, textStatus, error) {
                updateProviders([]);
            }
        });

        $.ajax({
            url: "@Raw(Model.Context.Paths.Roots.MultiPlug)authentication/providers/list",
            type: "get",
            async: false,
            success: function (data) {
                updateProviderSelectionList(data);
            },
            error: function (xhr, textStatus, error) {
                updateProviderSelectionList(null);
            }
        });
    });
</script>

