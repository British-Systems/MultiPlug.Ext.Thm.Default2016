@model MultiPlug.Base.Http.EdgeApp
@{
    Layout = "MultiPlug.Ext.Thm.Default2016.Layout";
}

@functions
{
    string DrawActionButton(string theAssemblyName, bool isEnabled, bool isLoaded)
    {
        if (isLoaded)
        {
            return "<a class=\"btn btn-red btn-loadextension\" id=" + theAssemblyName + "-btnStartStop\" href=\"multiplug/extensions/unload/?extension=" + theAssemblyName + "\"><i class=\"icon-stop\"></i></a>";
        }
        else if (!isLoaded && isEnabled)
        {
            return "<a class=\"btn btn-orange btn-loadextension\" id=" + theAssemblyName + "-btnStartStop\" href=\"multiplug/extensions/load/?extension=" + theAssemblyName + "\"><i class=\"icon-play\"></i></a>";
        }
        else if (!isLoaded && !isEnabled)
        {
            return "<a class=\"btn btn-green btn-loadextension\" id=" + theAssemblyName + "-btnStartStop\" href=\"multiplug/extensions/load/?extension=" + theAssemblyName + "\"><i class=\"icon-play\"></i></a>";
        }
        else
        {
            return string.Empty;
        }
    }
}

<style>
    .setting-heading img,
    .setting-heading h2 {
            display: inline-block;
            vertical-align: middle;
        }

    .setting-heading img {
            opacity: 0.7;
            filter: alpha(opacity=70);
        }

    .setting-heading h2 {
        margin-left: 0.1em;
        margin-top: 0px;
        margin-bottom: 20px;
        }
</style>

<div class="setting-heading">
    <h2><i class="icon-puzzle-piece"></i>&nbsp;Extensions</h2>
</div>
@if (Model.Extension.Model.UpdatePending)
        {
    <div class="alert">
        <a href="#" class="close" data-dismiss="alert">×</a>
        <strong>Updates Pending</strong> Restart the system to apply pending updates.
    </div>
}

<h3 class="box-header">Actions</h3>
<div class="box non-collapsible">
    <div class="row-fluid">
        <a href="settings/add/" class="btn btn-blue">Add</a>
        <a href="settings/update/" class="btn btn-blue">Update</a>
    </div>
</div>
<h3 class="box-header">Status</h3>
<div class="box non-collapsible">
    <div class="row-fluid">

        <table class="table table-condensed">
            <thead>
                <tr>
                    <th>Assembly Name</th>
                    <th>Friendly Name</th>
                    <th>Enabled</th>
                    <th>Start/Stop</th>
                    <th>Status</th>
                    <th>Remove</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var x in @Model.Extension.Model.ExtensionStatuses)
    {
                    <tr id="@x.AssemblyName-Row">
                        <td>@x.AssemblyName</td>
                        <td id="@x.AssemblyName-FriendlyName">@x.FriendlyName</td>
                        <td><input id="@x.AssemblyName-Enabled" class="check-enableextension" type="checkbox" value="@x.AssemblyName" @(x.Enabled ? "checked" : "") /></td>
                        <td id="@x.AssemblyName-StartStop">@Raw(DrawActionButton(x.AssemblyName, x.Enabled, x.Loaded))</td>
                        <td>
                            @if (!string.IsNullOrEmpty(x.Status))
                            {
                                <textarea id="@x.AssemblyName-Status">@x.Status</textarea>
                            }
                        </td>
                        <td><a class="btn btn-red btn-deleteextension" data-assemblyname="@x.AssemblyName" href="multiplug/extensions/remove/?extension=@x.AssemblyName"><i class="icon-trash"></i></a></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<script>
    function jq(myid) {

        return "#" + myid.replace(/(:|\.|\[|\]|,|=|@@)/g, "\\$1");

    }

    function DrawActionButton(theAssemblyName, isEnabled, isLoaded) {
        if (isLoaded) {
            return '<a class="btn btn-red btn-loadextension" id="' + theAssemblyName + '-btnStartStop" href="multiplug/extensions/unload/?extension=' + theAssemblyName + '"><i class="icon-stop"></i></a>';
        }
        else if (!isLoaded && isEnabled) {
            return '<a class="btn btn-orange btn-loadextension" id="' + theAssemblyName + '-btnStartStop" href="multiplug/extensions/load/?extension=' + theAssemblyName + '"><i class="icon-play"></i></a>';
        }
        else if (!isLoaded && !isEnabled) {
            return '<a class="btn btn-green btn-loadextension" id="' + theAssemblyName + '-btnStartStop" href="multiplug/extensions/load/?extension=' + theAssemblyName + '"><i class="icon-play"></i></a>';
        }
        else {
            return "";
        }
    }

    function ApplyLoadClick(StartStopButtons) {
        StartStopButtons.click(function (event) {
            event.preventDefault();

            $.post($(this).attr('href'), function (data) {

            })
            .done(function (data) {
                $(jq(data.assemblyName) + '-FriendlyName').html(data.friendlyName);
                $(jq(data.assemblyName) + "-Status").val(data.status);
                $(jq(data.assemblyName) + "-StartStop").html(DrawActionButton(data.assemblyName, data.enabled, data.loaded));
                if (data.enabled) {
                    $(jq(data.assemblyName) + "-Enabled").prop('checked', true);
                }
                else {
                    $(jq(data.assemblyName) + "-Enabled").prop('checked', false);
                }

                ApplyLoadClick($(jq(data.assemblyName) + "-btnStartStop"));
            })
            .fail(function (xhr, status, error) {
                OnError(xhr);
            });
        });
    }

    function OnError(xhr) {
        if (xhr.status == 401) {
            alert('Action requires User Log On');
        }
        if (xhr.status == 403) {
            alert('Insufficient user rights');
        }
    }

    $(document).ready(function () {
        $('.check-enableextension').change(function () {
            var thischeckbox = $(this);

            if (this.checked)
            {
                $.post('@Raw(Model.Context.Paths.Roots.MultiPlug)extensions/enable/?extension=' + this.value, function (data) {
                    })
                .done(function (data) {
                })
                .fail(function (xhr, status, error) {
                    $(thischeckbox).prop('checked', false);
                    OnError(xhr);
                });
                }
            else
            {
                $.post('@Raw(Model.Context.Paths.Roots.MultiPlug)extensions/disable/?extension=' + this.value, function (data) {
                    })
                .done(function (data) {
                })
                .fail(function (xhr, status, error) {
                    $(thischeckbox).prop('checked', true);
                    OnError(xhr);
                });
            }
        });

        $(".btn-deleteextension").click(function (event) {
            event.preventDefault();

            if (confirm("Are you sure you want to remove " + $(this).attr("data-assemblyname") + " ?" ) ) {
                $.post($(this).attr('href'), function (data) {

                })
                .done(function (data) {
                    $(jq(data.assemblyName) + '-Row').remove();
                })
                .fail(function (xhr, status, error) {
                    OnError(xhr);
                });
            }
        });

        ApplyLoadClick($('.btn-loadextension'));
    });
</script>